This project aims to set up a robot that can map the environment and plan a path according to the map to reach the target positions. 
The packages used in the project include pgm_map_creator, teleop_twist_keyborad, slam_gmapping, my_robot, pick_objects and add_markers packages.

The pgm_map_creator package is a downloaded package that can generate map directly from Gazebo world. 
However, the map it generates lacks information such as doors. Although SLAM can also generate map with the sensors's data in real time, this project still used the map generated by pgm_map_creator package.

The teleop_twist_keyborad package is another downloaded package for generating keyboard control for twist the robot.

The slam_mapping is also a downloaded package. It contains gmapping package that can do SLAM (simultaneous Localization and Mapping) with the laser data. 
To be more specific, the gmapping package uses a partical highly efficient filter-based SLAM called Rao-Blackwellized partible filter algorithm. 
With SLAM, this package can let us drive the robot and generate occupancy grid the map of the world in real time.
After having the map, it uses laser range finder and odometry data to localize itself by using Adaptive Monte Carlo Localization(AMCL).

The my_robot package contains a customized robot with a RGB-D camera and a laser sensor. This package also contains the generated world in Gazebo and all sorts of launch files for this project.

The pick_objects package includes pick_objects.cpp, which defines and drives the robot to pick-up and drop-off locations. The path planning and driving are achieved by using ROS Navidation stack. 
The ROS Navidation stack is based on Dijktra's, a variant of the Uniform Cost Search algorithm for finding the shorted path with a weighted graph.

In the end, the add_markers package aims to show the target positions up. The add_markers.cpp subscribes the information from robot odometers, and corporates with pick_objects.cpp to do home service functions. 
To match the rubric, I also wrote add_makers_time.cpp to show the pick-up point for 5s, hide it for 5s, and then show drop-off point for 5s.
